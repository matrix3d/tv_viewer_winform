name: .NET Core Desktop

on:
  workflow_dispatch:

jobs:

  build:
    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    # Execute all unit tests in the solution
    #- name: Execute unit tests
    #  run: dotnet test

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: |
        msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
        msbuild $env:Solution_Name /p:Configuration=$env:Configuration
    # build
    - name: build
      env:
        Solution_Name: webviewtest.sln                         # Replace with your solution name, i.e. MyWpfApp.sln.
        Test_Project_Path: webviewtest.csproj                 # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
        Configuration: Release

    - name : print
      run: |
       dir
       cd bin
       dir

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: tagv${{ github.run_number }}
        release_name: Release${{ github.run_number }}
        body: |
            ${{ steps.Changelog.outputs.changelog }}
        draft: false
        prerelease: false
    - name: upload release asset
      id: upload-release-asset2
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./bin/Release
        asset_name: CCTV_Viewer_v${{ github.run_number }}
        
    - uses: actions/upload-artifact@v3
      with:
          name: CCTV_Viewer_v${{ github.run_number }}
          path: ./bin/Release

